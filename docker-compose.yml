version: '3.8'

services:
  # PHP Service
  app:
    build:
      context: .
      dockerfile: ./docker/php/DockerFile
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
      APP_NAME: ${APP_NAME}
      APP_ENV: ${APP_ENV}
      APP_KEY: ${APP_KEY}
      APP_DEBUG: ${APP_DEBUG}
      APP_URL: ${APP_URL}
      DB_CONNECTION: ${DB_CONNECTION}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    working_dir: /var/www
    volumes:
      - ./src:/var/www
      - ./docker/php/php.ini:/usr/local/etc/php/conf.d/php.ini
    networks:
      - laravel-network

  # Nginx Service
  webserver:
    image: nginx:alpine
    container_name: webserver
    restart: unless-stopped
    tty: true
    ports:
      - "8000:80"
    volumes:
      - ./src:/var/www
      - ./docker/nginx:/etc/nginx/conf.d
    networks:
      - laravel-network

  db_init:
    image: alpine
    command:
      - sh
      - -c
      - |
        mkdir -p /data && 
        chown 999:999 /data
    volumes:
      - ./mysql_data:/data
    networks:
      - laravel-network

  # MySQL Service
  db:
    build:
      context: ./docker/mysql
    image: mysql:8.0
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - db_init
    volumes:
      - ./db:/var/lib/mysql
    networks:
      - laravel-network

  # phpMyAdmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    tty: true
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    depends_on:
      - db
    networks:
      - laravel-network
    
 
# Docker Networks
networks:
  laravel-network:
    driver: bridge

# Docker Volumes
volumes:
  dbdata:
    driver: local